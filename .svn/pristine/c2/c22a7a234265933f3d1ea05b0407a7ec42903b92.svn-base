using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using MySql.Data.MySqlClient;
using Yaohuasoft.Framework.Library;
using Yaohuasoft.Framework.DAL;
using System.Data;
namespace Yaohuasoft.Framework.BLL.SysAdmin
{
    public static partial class  DrugdealerInfoBLL
    {
        /// <summary>
        /// 新增
        /// </summary>
        /// <returns>执行结果</returns>
        public static int Add(DrugdealerInfoDALEntity entity,string corpId,string departmentId,string userName)
        {
            var ret = 0;
            entity.EditTime=Convert.ToDateTime(DateTime.Now.ToString("yyyy-MM-dd"));
entity.EditUserName=userName;
if(SysCorpDAL.Select(0,entity.DealerId)==null)SysCorpDAL.Merge(0,new SysCorpDALEntity(){CorpId=entity.DealerId,CorpName=entity.DealerName});
            ret = DrugdealerInfoDAL.Merge(0, entity,0);
            ////调试用SQL
            string sql=SystemConfig.SQL;
            return ret;
        }
        /// <summary>
        /// 新增
        /// </summary>
        /// <returns>执行结果</returns>
        public static int Merge(DrugdealerInfoDALEntity entity,string corpId,string departmentId,string userName)
        {
            var ret = 0;
            entity.EditTime=Convert.ToDateTime(DateTime.Now.ToString("yyyy-MM-dd"));
entity.EditUserName=userName;
if(SysCorpDAL.Select(0,entity.DealerId)==null)SysCorpDAL.Merge(0,new SysCorpDALEntity(){CorpId=entity.DealerId,CorpName=entity.DealerName});
            ret = DrugdealerInfoDAL.Merge(0, entity,0);
            ////调试用SQL
            string sql=SystemConfig.SQL;
            return ret;
        }
        /// <summary>
        /// 根据ID删除单个实体
        /// </summary>
        /// <returns>执行结果</returns>
        public static int Delete(string id,string corpId,string departmentId,string userName)
        {
            var ret = 0;
            //验证ID和所属用户ID
            if (string.IsNullOrEmpty(id.ToStr()))
                return ret;
            //实体赋值获取
            ret = DrugdealerInfoDAL.Delete(0, id,0);
            return ret;
        }
        public static DrugdealerInfoAuditDALEntity    Entity2AuditEntity2(DrugdealerInfoDALEntity   entity)
        {
            DrugdealerInfoAuditDALEntity result = new DrugdealerInfoAuditDALEntity();
            result.DealerId = entity.DealerId;
            result.DealerName = entity.DealerName;
            result.DealerGrade = entity.DealerGrade;
            result.PowerIndex = entity.PowerIndex;
            result.DealerLogo = entity.DealerLogo;
            result.BusinessScope = entity.BusinessScope;
            result.ManageUserId = entity.ManageUserId;
            result.DealerLinkname = entity.DealerLinkname;
            result.DealerTel = entity.DealerTel;
            result.DealerMap = entity.DealerMap;
            result.DealerSynopsis = entity.DealerSynopsis;
            result.DealerWebsite = entity.DealerWebsite;
            result.GspLicensePic = entity.GspLicensePic;
            result.LegalName = entity.LegalName;
            result.LegalIdentityPic = entity.LegalIdentityPic;
            result.LegalIdentity = entity.LegalIdentity;
            result.BusinessLicencePic = entity.BusinessLicencePic;
            result.BusinessLicenceNum = entity.BusinessLicenceNum;
            result.BusinessLicenceTime = entity.BusinessLicenceTime;
            result.DealerMobile = entity.DealerMobile;
            result.DealerFax = entity.DealerFax;
            result.DealerEmail = entity.DealerEmail;
            result.ZipCode = entity.ZipCode;
            result.DealerQq = entity.DealerQq;
            result.AreaId = entity.AreaId;
            result.DealerAddress = entity.DealerAddress;
            result.DealerShopwebsite = entity.DealerShopwebsite;
            result.IsSeo = entity.IsSeo;
            result.SeoTitle = entity.SeoTitle;
            result.SeoKeywords = entity.SeoKeywords;
            result.SeoDescription = entity.SeoDescription;
            result.AuditState = entity.AuditState;
            result.AuditReason = entity.AuditReason;
            result.AuditRemark = entity.AuditRemark;
            result.AuditTime = entity.AuditTime;
            result.AuditUserName = entity.AuditUserName;
            result.EditUserName = entity.EditUserName;
            result.EditTime = entity.EditTime;
            return result;
        }
        /// <summary>
        /// 根据ID提交审核单个实体
        /// </summary>
        /// <returns>执行结果</returns>
        public static int ShenQingById(string id,string corpId,string departmentId,string userName)
        {
            var ret = 0;
            //验证ID和所属用户ID
            if (string.IsNullOrEmpty(id.ToStr()))
                return ret;
            //实体赋值获取
            ////TODO 根据实际情况填写【根据ID提交申请】的代码
            return ret;
        }
        /// <summary>
        /// 根据ID同意单个实体
        /// </summary>
        /// <returns>执行结果</returns>
        public static int TongYi(string id,string corpId,string departmentId,string userName)
        {
            var ret = 0;
            //验证ID和所属用户ID
            if (string.IsNullOrEmpty(id.ToStr()))
                return ret;
            //实体赋值获取
            ////TODO 根据实际情况填写【同意审核】的代码
            return ret;
        }
        /// <summary>
        /// 根据ID拒绝单个实体
        /// </summary>
        /// <returns>执行结果</returns>
        public static int JuJue(string id,string corpId,string departmentId,string userName)
        {
            var ret = 0;
            //验证ID和所属用户ID
            if (string.IsNullOrEmpty(id.ToStr()))
                return ret;
            //实体赋值获取
            ////TODO 根据实际情况填写【拒绝审核】的代码
            {
            }
            {
            }
            return ret;
        }
        /// <summary>
        /// 修改
        /// </summary>
        /// <returns>执行结果</returns>
        public static int Save(DrugdealerInfoDALEntity entity,string corpId,string departmentId,string userName)
        {
            var ret = 0;
            //验证名称
            if (string.IsNullOrEmpty(entity.DealerId.ToStr()))
                return ret;
            DrugDealerInfoSyncServices.SyncDrugDealerInfo(entity.DealerId);
entity.EditTime=Convert.ToDateTime(DateTime.Now.ToString("yyyy-MM-dd"));
entity.EditUserName=userName;
            ret = DrugdealerInfoDAL.Update(0, entity,0);
            return ret;
        }
        /// <summary>
        /// 根据ID获取单个实体
        /// </summary>
        public static DrugdealerInfoDALEntity GetEntity(string id,string corpId,string departmentId,string userName)
        {
            //验证ID和所属用户ID
            if (string.IsNullOrEmpty(id.ToStr()))
                return null;
            //实体获取
            var entity = DrugdealerInfoDAL.Select(0, id,0);
            return entity;
        }
        /// <summary>
        /// 根据所有者获取列表
        /// </summary>
        /// <param name="userid">用户ID</param>
        /// <param name="pindex">页码</param>
        /// <param name="psize">页大小</param>
        /// <param name="count">列表统计</param>
        /// <returns>项目实体列表</returns>
        public static List<DrugdealerInfoDALEntity> GetList( YaohuaDict<string, string> dropList,
            YaohuaDict<string, string> textBox,YaohuaDict<string, string> textBoxInOne, YaohuaDict<string, string> sortList,
             int CurrentPageIndex, int PageSize,string corpId,string departmentId,string userName, out int count)
        {
            var list = new List<DrugdealerInfoDALEntity>();
            count = 0;
            //查询实体赋值
            var parm = new DrugdealerInfoQueryParameter();
            if (dropList["DealerGrade"].IsNullOrEmptys()==false) parm.EqualTo.DealerGrade = dropList["DealerGrade"].ToString();
            if (textBox["EditTime"].IsNullOrEmptys()==false) parm.Like.EditTime = textBox["EditTime"].ToDatetime();
            if (textBoxInOne["DealerName"].IsNullOrEmptys() == false) parm.Like.DealerName = textBoxInOne["DealerName"].ToString();
            if (textBoxInOne["AuditUserName"].IsNullOrEmptys() == false) parm.Like.AuditUserName = textBoxInOne["AuditUserName"].ToString();
            if (textBoxInOne["EditUserName"].IsNullOrEmptys() == false) parm.Like.EditUserName = textBoxInOne["EditUserName"].ToString();
            if (sortList.ContainsValue("按最后修改时间排序"))   {parm.OrderBy.Add("EditTime",YaohuaOrderByType.Desc);}
            parm.Pager.PageIndex = CurrentPageIndex-1;//数据从索引0开始
            parm.Pager.OnePageSize = PageSize;
            //统计查询  分页使用
            count = DrugdealerInfoDAL.Count(0, parm,0);
            //数据库查询
            list = DrugdealerInfoDAL.Select(0, parm,0).ToList();
            ////调试用SQL
            string sql=SystemConfig.SQL;
            ///////////////////////////////
            var list2 = new List<DrugdealerInfoDALEntity>();
            for (int i = 0; i < list.Count; i++)
            {
                DrugdealerInfoDALEntity tmpEntity = list[i].Clone();
                tmpEntity.DealerGrade=SysConfigService.GetValue(corpId , "DEALER_GRADE", list[i].DealerGrade.ToStr());
                list2.Add(tmpEntity);
            }
            return list2;
        }
        /// <summary>
        /// 根据所有者获取列表
        /// </summary>
        /// <param name="userid">用户ID</param>
        /// <param name="pindex">页码</param>
        /// <param name="psize">页大小</param>
        /// <param name="count">列表统计</param>
        /// <returns>项目实体列表</returns>
        public static List<DrugdealerInfoDALEntity> GetList4Export( YaohuaDict<string, string> dropList,
            YaohuaDict<string, string> textBox,YaohuaDict<string, string> textBoxInOne, YaohuaDict<string, string> sortList
            ,string corpId,string departmentId,string userName, out int count)
        {
            var list = new List<DrugdealerInfoDALEntity>();
            count = 0;
            //查询实体赋值
            var parm = new DrugdealerInfoQueryParameter();
            if (dropList["DealerGrade"].IsNullOrEmptys()==false) parm.EqualTo.DealerGrade = dropList["DealerGrade"].ToString();
            if (textBox["EditTime"].IsNullOrEmptys()==false) parm.Like.EditTime = textBox["EditTime"].ToDatetime();
            if (textBoxInOne["DealerName"].IsNullOrEmptys() == false) parm.Like.DealerName = textBoxInOne["DealerName"].ToString();
            if (textBoxInOne["AuditUserName"].IsNullOrEmptys() == false) parm.Like.AuditUserName = textBoxInOne["AuditUserName"].ToString();
            if (textBoxInOne["EditUserName"].IsNullOrEmptys() == false) parm.Like.EditUserName = textBoxInOne["EditUserName"].ToString();
            if (sortList.ContainsValue("按最后修改时间排序"))   {parm.OrderBy.Add("EditTime",YaohuaOrderByType.Desc);}
            parm.Pager.PageIndex = 0;//数据从索引0开始
            parm.Pager.OnePageSize = OnePageSize4Export;
            //统计查询  分页使用
            count = DrugdealerInfoDAL.Count(0, parm,0);
            //排序
            parm.OrderBy.Add("DealerId", YaohuaOrderByType.Desc);
            //数据库查询
            list = DrugdealerInfoDAL.Select(0, parm,0).ToList();
            ////调试用SQL
            string sql=SystemConfig.SQL;
            ///////////////////////////////
            var list2 = new List<DrugdealerInfoDALEntity>();
            for (int i = 0; i < list.Count; i++)
            {
                DrugdealerInfoDALEntity tmpEntity = list[i].Clone();
                tmpEntity.DealerGrade=SysConfigService.GetValue(corpId , "DEALER_GRADE", list[i].DealerGrade.ToStr());
                list2.Add(tmpEntity);
            }
            return list2;
        }
        public static string ImportExcel2Db(DataTable table, ImportExcelType ImportType, string corpId, string departmentId, string userName)
        {
            if (table == null) return "请选择正确的EXCEL文件！";
            int TotalCount = table.Rows.Count;
            int OkCount = 0;
            int AuditCount = 0;
            DrugdealerInfoDALEntity[] list = DrugdealerInfoDAL.DataTable2Array4CnName(table, int.MaxValue);
            foreach (var item in list)
            {
                if (DrugdealerInfoDALEntity.IsEmpty(item) == true) continue;
                ////解析数据
                item.DealerGrade=SysConfigService.GetKey(corpId,"DEALER_GRADE",item.DealerGrade);
                item.BusinessScope=SysConfigService.TextList2KeyList(corpId,"BUSINESS_SCOPE",item.BusinessScope);
                item.AreaId=SysConfigService.GetKey(corpId,"AREA_ID",item.AreaId);
                item.IsSeo=SysConfigService.GetKey(corpId,"IS_SEO",item.IsSeo);
                DrugdealerInfoDALEntity oldEntity = null;
                if (item.DealerId != null)
                    oldEntity = DrugdealerInfoBLL.GetEntity(item.DealerId.ToString(), corpId, departmentId, userName);
            switch (ImportType)
            {
                case ImportExcelType.NotExistImport:
                        ////如果没有老数据
                        if (oldEntity == null)
                        {
                            ////将新数据写入
                            Add(item, corpId, departmentId, userName);
                        ////
                            OkCount++;
                        }
                        ////如果有老数据
                        else
                        {
                        }
                    break;
                    case ImportExcelType.UseImport:
                        ////如果没有老数据
                        if (oldEntity == null)
                        {
                            ////将新数据写入
                            Add(item, corpId, departmentId, userName);
                        ////
                            OkCount++;
                        }
                        ////如果有老数据
                        else
                        {
                            ////将新数据写入
                            Save(item, corpId, departmentId, userName);
                            ////
                            OkCount++;
                        }
                    break;
                default:
                    break;
            }
            }
            int NgCount = TotalCount - OkCount;
            string msg = "";
            msg = "读取" + TotalCount + "条数据";
            if (OkCount > 0) msg += "，成功导入" + OkCount + "条";
            if (NgCount > 0) msg += "，跳过" + NgCount + "条";
            if (AuditCount > 0) msg += "，有" + AuditCount + "条需要审核";
            return msg;
        }
        public static string ImportExcel2Db4Audit(DataTable table, ImportExcelType ImportType, string corpId, string departmentId, string userName)
        {
            if (table == null) return "请选择正确的EXCEL文件！";
            int TotalCount = table.Rows.Count;
            int OkCount = 0;
            int AuditCount = 0;
            DrugdealerInfoDALEntity[] list = DrugdealerInfoDAL.DataTable2Array4CnName(table, int.MaxValue);
            foreach (var item in list)
            {
                if (DrugdealerInfoDALEntity.IsEmpty(item) == true) continue;
                ////解析数据
                item.DealerGrade=SysConfigService.GetKey(corpId,"DEALER_GRADE",item.DealerGrade);
                item.BusinessScope=SysConfigService.TextList2KeyList(corpId,"BUSINESS_SCOPE",item.BusinessScope);
                item.AreaId=SysConfigService.GetKey(corpId,"AREA_ID",item.AreaId);
                item.IsSeo=SysConfigService.GetKey(corpId,"IS_SEO",item.IsSeo);
                DrugdealerInfoDALEntity oldEntity = null;
                if (item.DealerId != null)
                    oldEntity = DrugdealerInfoBLL.GetEntity(item.DealerId.ToString(), corpId, departmentId, userName);
            switch (ImportType)
            {
                case ImportExcelType.NotExistImport:
                        ////如果没有老数据
                        if (oldEntity == null)
                        {
                            ////将新数据写入
                            Add(item, corpId, departmentId, userName);
                        ////
                            OkCount++;
                        }
                        ////如果有老数据
                        else
                        {
                        }
                    break;
                    case ImportExcelType.UseImport:
                        ////如果没有老数据
                        if (oldEntity == null)
                        {
                            ////将新数据写入
                            var auditEntity2 = Entity2AuditEntity2(item);
                            auditEntity2.AuditState = "待审核";
                            DrugdealerInfoAuditDAL.Merge(0,auditEntity2);
                            AuditCount++;
                            break;
                        }
                        ////如果有老数据
                        else
                        {
                            var auditEntity2=Entity2AuditEntity2(item);
                            auditEntity2.AuditState="待审核";
                            DrugdealerInfoAuditDAL.Merge(0,auditEntity2);
                            AuditCount++;
                            break;
                        }
                    break;
                default:
                    break;
                }
            }
            int NgCount = TotalCount - OkCount;
            string msg = "";
            msg = "读取" + TotalCount + "条数据";
            if (OkCount > 0) msg += "，成功导入" + OkCount + "条";
            if (NgCount > 0) msg += "，跳过" + NgCount + "条";
            if (AuditCount > 0) msg += "，有" + AuditCount + "条需要审核";
            return msg;
        }
        /// <summary>
        /// 导出时最多导出多少条
        /// </summary>
        static public int OnePageSize4Export = 1000;
        /// <summary>
        /// 将实体数组转化为DataTable
        /// 取最先N条
        /// </summary>
        /// <param name="input">数据列表</param>
        /// <param name="TopCount">取最先N条</param>
        /// <returns></returns>
        static public DataTable EntityList2DataTableCn( DrugdealerInfoDALEntity[] input)
        {
            DataTable result = new DataTable();
            List<DrugdealerInfoDALEntity> list = new List<DrugdealerInfoDALEntity>();
            ////将LIST列表的ID变成名字
            foreach (var item in input)
            {
                ////克隆后加入新列表
                DrugdealerInfoDALEntity entity = item.Clone();
                entity.DealerGrade=SysConfigService.GetValue("","DEALER_GRADE",item.DealerGrade);
                entity.BusinessScope=MultiSelectService.GetValue("","BUSINESS_SCOPE",item.BusinessScope.ToStr());
                entity.AreaId=SysConfigService.GetValue("","AREA_ID",item.AreaId);
                entity.IsSeo=SysConfigService.GetValue("","IS_SEO",item.IsSeo);
                list.Add(entity);
            }
            ////构建DataTable的列
            result.Columns.Add("经销商名称", typeof(string));
            result.Columns.Add("是否认证", typeof(string));
            result.Columns.Add("权重", typeof(int));
            result.Columns.Add("公司LOGO", typeof(string));
            result.Columns.Add("经营范围", typeof(string));
            result.Columns.Add("管理用户ID", typeof(string));
            result.Columns.Add("联系人", typeof(string));
            result.Columns.Add("联系电话", typeof(string));
            result.Columns.Add("地图标注", typeof(string));
            result.Columns.Add("简介", typeof(string));
            result.Columns.Add("经销商官网", typeof(string));
            result.Columns.Add("企业法人/代理人身份证照片", typeof(string));
            result.Columns.Add("法人/代理人身份证号", typeof(string));
            result.Columns.Add("营业执照", typeof(string));
            result.Columns.Add("营业执照号码", typeof(string));
            result.Columns.Add("营业执照有效期", typeof(string));
            result.Columns.Add("移动手机", typeof(string));
            result.Columns.Add("传真", typeof(string));
            result.Columns.Add("电子邮箱", typeof(string));
            result.Columns.Add("邮政编码", typeof(string));
            result.Columns.Add("QQ", typeof(string));
            result.Columns.Add("地区", typeof(string));
            result.Columns.Add("街道地址", typeof(string));
            result.Columns.Add("SEO开关", typeof(string));
            result.Columns.Add("SEO标题", typeof(string));
            result.Columns.Add("SEO关键字", typeof(string));
            result.Columns.Add("SEO描述", typeof(string));
            result.Columns.Add(" ", typeof(string));
            int i = 0;
            ////填充DataTable的数据
            foreach (DrugdealerInfoDALEntity item in input)
            {
                result.Rows.Add(
                item.DealerName,
                item.DealerGrade,
                item.PowerIndex,
                item.DealerLogo,
                item.BusinessScope,
                item.ManageUserId,
                item.DealerLinkname,
                item.DealerTel,
                item.DealerMap,
                item.DealerSynopsis,
                item.DealerWebsite,
                item.LegalIdentityPic,
                item.LegalIdentity,
                item.BusinessLicencePic,
                item.BusinessLicenceNum,
                item.BusinessLicenceTime,
                item.DealerMobile,
                item.DealerFax,
                item.DealerEmail,
                item.ZipCode,
                item.DealerQq,
                item.AreaId,
                item.DealerAddress,
                item.IsSeo,
                item.SeoTitle,
                item.SeoKeywords,
                item.SeoDescription,
                "");
                i++;
            }
            return result;
        }
    }
}
